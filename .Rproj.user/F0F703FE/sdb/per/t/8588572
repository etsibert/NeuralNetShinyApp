{
    "collab_server" : "",
    "contents" : "\n# This is the server logic for a Shiny web application.\n# You can find out more about building applications with Shiny here:\n#\n# http://shiny.rstudio.com\n#\n\nlibrary(shiny)\nlibrary(neuralnet)\n\nshinyServer(function(input, output) {\n\n\n  observeEvent(input$btnTrain,{\n    set.seed(123)\n    hiddenNodesL1<-as.numeric(input$nNodesL1)\n    hiddenNodesL2<-as.numeric(input$nNodesL2)\n    x<-as.numeric(input$xRange[1]):as.numeric(input$xRange[2])\n    if(input$Function==\"f1\"){\n      withProgress(message = 'Training Neural Net',detail = 'This may take a while...', value = 0, {\n        y<-x^2\n        df<-data.frame(X=x, Y=y)\n        incProgress(1/8)\n        model_nn<-neuralnet(Y~X,data=df,hidden=c(hiddenNodesL1,hiddenNodesL2),linear.output=T, rep=50, stepmax=10000) \n        y_hat<-compute(model_nn, df$X)\n        incProgress(2/8)\n      \n        df$y_nn<-y_hat$net.result\n        df$error<-df$Y-df$y_nn\n        incProgress(3/8)\n      \n        output$mainPlot<-renderPlot({\n          plot(df$X, df$Y, col=\"red\", type=\"o\", xlab=\"\", ylab=\"\")\n          par(new=T)\n          plot(df$X, y_hat$net.result, col=\"blue\",xlab=\"\", ylab=\"\")\n          par(new=T)\n          plot(df$X, y_hat$net.result, type=\"l\", col=\"black\",xlab=\"X\", ylab=\"x^2 and Neural Approx.\", main=\"y=x^2 vs Neural Net Approximation\")\n          legend('bottomright',legend=c('y=x^2','Neural Net'),pch=18,col=c('red','blue'), bty='n')\n        })\n        incProgress(4/8)\n        output$net<-renderPlot({plot(model_nn, rep=\"best\")})\n        incProgress(5/8)\n        output$boxPlot<-renderPlot({boxplot(df$error, main=\"Neural Net Error\")})\n        incProgress(6/8)\n        output$df<-renderTable(df)\n        incProgress(7/8)\n        MSE<-sum((df$Y-df$y_nn)^2)/length(df$Y)\n        output$MSE<-renderText(paste(\"MSE=\",MSE, sep=\" \"))\n        incProgress(8/8)\n      })\n    }\n    else{\n      withProgress(message = 'Training Neural Net',detail = 'This may take a while...', value = 0, {\n        y<-sin(x)+0.2*rnorm(1)\n        df<-data.frame(X=x, Y=y)\n        incProgress(1/8)\n        model_nn<-neuralnet(Y~X,data=df,hidden=c(hiddenNodesL1,hiddenNodesL2), stepmax =10000,rep=50,linear.output=T) \n        y_hat<-compute(model_nn, df$X)\n        incProgress(2/8)\n        df$y_nn<-y_hat$net.result\n        df$error<-df$Y-df$y_nn\n        incProgress(3/8)\n        output$mainPlot<-renderPlot({\n          plot(df$X, df$Y, col=\"red\", type=\"o\", xlab=\"\", ylab=\"\")\n          par(new=T)\n          plot(df$X, y_hat$net.result, col=\"blue\",xlab=\"\", ylab=\"\")\n          par(new=T)\n          plot(df$X, y_hat$net.result, type=\"l\", col=\"black\",xlab=\"X\", ylab=\"sin(x)+error and Neural Approx.\", main=\"sin(x)+error vs Neural Net Approximation\")\n          legend('bottomright',legend=c('y=sin(x)+error','Neural Net'),pch=18,col=c('red','blue'), bty='n')\n        })\n        incProgress(4/8)\n        output$net<-renderPlot({plot(model_nn, rep=\"best\")})\n        incProgress(5/8)\n        output$boxPlot<-renderPlot({boxplot(df$error, main=\"Neural Net Error\")})\n        incProgress(6/8)\n        output$df<-renderTable(df)\n        incProgress(7/8)\n        MSE<-sum((df$Y-df$y_nn)^2)/length(df$Y)\n        output$MSE<-renderText(paste(\"MSE=\",MSE, sep=\" \"))\n        incProgress(8/8)\n      })\n    }\n  })\n\n})\n",
    "created" : 1494106933054.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "1692693302",
    "id" : "8588572",
    "lastKnownWriteTime" : 1494106930,
    "last_content_update" : 1494106930,
    "path" : "~/NeuralNetShinyApp/server.R",
    "project_path" : "server.R",
    "properties" : {
        "source_window_id" : ""
    },
    "relative_order" : 2,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}